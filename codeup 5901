#include<stdio.h>
#include<string.h>			//注意编译错误的时候可以尝试加入头文件#include<stdbool.h>
const int maxn=256;			//这里maxn是一个常量,虽然在这道题中没有改动maxn,但是用const是一个好习惯
bool substring(char str[])	//注意这里必须在这句就char声明str[]字符串
{
//	char str[];				//在这里写char声明会导致通不过,会让括号外的str[]无法识别
	int len,i;				
	len=strlen(str);		//strlen()是一个很重要的函数
	for(i=0;i<len/2;i++)	//一半就够了
	{
		//这里要证明此字符串是一个回文串需要证明所有的都一一对应,但
		//是只要有任何一个不能对应,就可以证明不是回文串,所以这里用反推.
		if(str[i]!=str[len-1-i])	
			return false;			
	}								
	return true;	
}
int main()
{
	char str[maxn];
	while(gets(str))
	{
		bool flag=substring(str);	//对应上边
		if(flag==true)
			printf("YES\n");
		else	
			printf("NO\n");
	}
		return 0;
}

/*#include<stdio.h>
#include<string.h>			
const int maxn=256;			
bool substring(char str[])	
{
	int len,i;				
	len=strlen(str);	
	for(i=0;i<len/2;i++)
	{
		if(str[i]!=str[len-1-i])	
			return 0;				//这里可以证明return返回的值是可以随意选择的	
	}								//只需要记得与下面对应
	return 1;		
}
int main()
{
	char str[maxn];
	while(gets(str))
	{
		bool flag=substring(str);	
		if(flag==1)
			printf("YES\n");
		else	
			printf("NO\n");
	}
		return 0;
}*/

/*#include<stdio.h>
#include<string.h>			//注意编译错误的时候可以尝试加入头文件#include<stdbool.h>
const int maxn=256;			//这里maxn是一个常量,虽然在这道题中没有改动maxn,但是用const是一个好习惯
bool substring(char str[])	//这种写法必定是错误的
{
	int len,i;					//用bool 某个定义() {return(条件)}
	len=strlen(str);			//在这种带for的情况下不适用
	for(i=0;i<len/2;i++)		//会在每次循环都返回一次,但是codeup内通过了
	{							//但是这个一定是错误的,他只会考虑首字母和最后一个字母
		return(str[i]!=str[len-1-i]);	
	}								
}
int main()
{
	char str[maxn];
	while(gets(str))
	{
		bool flag=substring(str);	
		if(flag==1)
			printf("NO\n");
		else	
			printf("YES\n");
	}
		return 0;


/*#include<cstdio>
#include<cstring>
const int maxn=256;							//标准答案
bool Judge(char character[])
{
	int lenth=strlen(character);
	for(int i=0;i<lenth/2;i++)
	{
		//数组折中，i对应max-i-1 
		if(character[i]!=character[lenth-1-i])
			return false;	
	}
	return true;
}
int main()
{	
	char character[maxn];
	while(gets(character))
	{
		bool flag=Judge(character);
		if(flag==true)
		{
			printf("YES\n");
			return 0;					//这句话的特点是让他只进行一次判断就直接结束
		}								↑
			else						↑
		{								↑
			printf("NO\n");				↑
			return 0;					//如果要进行多组判断就要去掉这句话
		}
	}
	return 0;
}*/

